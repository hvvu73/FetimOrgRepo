{"programModules":{"EXT001MI":{"program":"EXT001MI","triggers":{},"transactions":{"LstCertificateN":{"sourceUuid":"6c395770-5bdb-4a83-8fd5-a5216fee71bb","name":"LstCertificateN","program":"EXT001MI","description":"Lst Certificate Numbers For PIM","active":true,"multi":false,"modified":1673871774350,"modifiedBy":"ABPULI","outputFields":[{"name":"ITNO","description":"item number","length":15,"mandatory":false,"type":"A"},{"name":"ATID","description":"Attribute Identity","length":3000,"mandatory":false,"type":"A"},{"name":"AALF","description":"From Attribute Value","length":3000,"mandatory":false,"type":"A"}],"inputFields":[{"name":"CONO","description":"company","length":3,"mandatory":true,"type":"N"},{"name":"ITNO","description":"Item Number","length":15,"mandatory":true,"type":"A"}],"utilities":[]}},"batches":{},"advancedPrograms":{}}},"utilities":{},"sources":{"6c395770-5bdb-4a83-8fd5-a5216fee71bb":{"uuid":"6c395770-5bdb-4a83-8fd5-a5216fee71bb","updated":1673863552838,"updatedBy":"MOSHAR05","created":1673871695243,"createdBy":"ABPULI","apiVersion":"0.15","beVersion":"16.0.0.20221110165802","language":"GROOVY","codeHash":"393FC068CA4AA483C0EE0EBCDE703B64ED72AD5DF14F642611554AFBB4905945","code":""}}}