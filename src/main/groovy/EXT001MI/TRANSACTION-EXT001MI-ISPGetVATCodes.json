{"programModules":{"EXT001MI":{"program":"EXT001MI","triggers":{},"transactions":{"ISPGetVATCodes":{"sourceUuid":"508ac32e-ae10-4688-a843-f94531ab82b8","name":"ISPGetVATCodes","program":"EXT001MI","description":"ALL_MI_0001_GetVATCodes","active":true,"multi":true,"modified":1686758359024,"modifiedBy":"SMALALI","outputFields":[{"name":"DIVI","description":"division","length":3,"mandatory":false,"type":"A"},{"name":"VTCD","description":"VAT code","length":2,"mandatory":false,"type":"N"},{"name":"TX40","description":"description","length":40,"mandatory":false,"type":"A"},{"name":"VTD1","description":"nondeductible VAT 1","length":5,"mandatory":false,"type":"N"},{"name":"VTP1","description":"VAT rate 1","length":5,"mandatory":false,"type":"N"},{"name":"VTD2","description":"nondeductible VAT 2","length":5,"mandatory":false,"type":"N"},{"name":"VTP2","description":"VAT rate 2","length":5,"mandatory":false,"type":"N"},{"name":"FRDT","description":"from date","length":8,"mandatory":false,"type":"N"},{"name":"ONSR","description":"VAT on service","length":1,"mandatory":false,"type":"A"},{"name":"VATT","description":"VAT method","length":20,"mandatory":false,"type":"N"},{"name":"CSCD","description":"country","length":3,"mandatory":false,"type":"A"}],"inputFields":[],"utilities":[]}},"batches":{},"advancedPrograms":{}}},"utilities":{},"sources":{"508ac32e-ae10-4688-a843-f94531ab82b8":{"uuid":"508ac32e-ae10-4688-a843-f94531ab82b8","updated":1688395832519,"updatedBy":"SMALALI","created":1686758204044,"createdBy":"SMALALI","apiVersion":"0.9","beVersion":"16.0.0.20230419174557.9","language":"GROOVY","codeHash":"0510D5493E37616DF1E96637D94EA41A0DBEC69C33472A84B176C2CC98C2E661","code":"LyoqDQoqIFJFQURNRQ0KKiBUaGlzIGV4dGVuc2lvbiBzZW5kcyBNMyBWQVQgY29kZSBkZXRhaWxzIHRvIDNyZCBwYXJ0eSBhcHBsaWNhdGlvbiBJU1AuIA0KKiANCioNCiogTmFtZTogRVhUMDAxTUkuSVNQR2V0VkFUQ29kZXMNCiogRGVzY3JpcHRpb246IA0KKiBEYXRlICAgICAgICAgIENoYW5nZWQgYnkgICAgICAgICAgICAgIERlc2NyaXB0aW9uDQoqIDIwMjEtMDUtMTkgICAgSGl0ZXNoIENob3RyYW5pICAgICAgICAgSW5pdGlhbCB2ZXJzaW9uDQoqIDIwMjMtMDMtMTAgICAgU2hhc2hhbmsgTWFsYWxpICAgICAgICAgUmVtb3ZlIHVudXNlZCBjb2RlLCB1c2FnZSBsb3dlckNhbWVsQ2FzZQ0KKiAyMDIzLTAzLTI3ICAgIFNoYXNoYW5rIE1hbGFsaSAgICAgICAgIFJlbW92ZSB0aGUgcmVjb3JkcyB3aXRoIFZhdCBjb2RlIHplcm8gDQoqIDIwMjMtMDYtMDEgICAgU2hhc2hhbmsgTWFsYWxpICAgICAgICAgQWRkZWQgbG9naWMgdG8gZmlsdGVyIHZhdCBjb2RlcyBiYXNlZCBvbiBDVUdFWDEgZW50cnkgYW5kIHplcm8gDQoqLw0KDQoNCnB1YmxpYyBjbGFzcyBJU1BHZXRWQVRDb2RlcyBleHRlbmRzIEV4dGVuZE0zVHJhbnNhY3Rpb24gew0KICBwcml2YXRlIGZpbmFsIE1JQVBJIG1pOw0KICBwcml2YXRlIGZpbmFsIFByb2dyYW1BUEkgcHJvZ3JhbTsNCiAgcHJpdmF0ZSBmaW5hbCBNSUNhbGxlckFQSSBtaUNhbGxlcjsNCiAgcHJpdmF0ZSBmaW5hbCBEYXRhYmFzZUFQSSBkYXRhYmFzZTsNCiAgcHJpdmF0ZSBmaW5hbCBMb2dnZXJBUEkgbG9nZ2VyOw0KICBwcml2YXRlIFN0cmluZyBDT05PID0gIiI7DQogIHByaXZhdGUgU3RyaW5nIERpdmlzaW9uID0gIiI7DQogIHByaXZhdGUgU3RyaW5nIHN0YXJ0RElWSSA9ICIiOw0KICBwcml2YXRlIFN0cmluZyBpZ25vcmVCbGFua0RpdmlzaW9uID0gIiI7DQogIC8vcHJpdmF0ZSBTdHJpbmcgaWdub3JlVmF0Q29kZXMgPSAiIjsNCiAgcHJpdmF0ZSBBcnJheUxpc3QgPCBTdHJpbmcgPiBtZXRob2RQb3NpdGlvbkxpc3QgPSBudWxsOw0KICBwcml2YXRlIEFycmF5TGlzdCA8IFN0cmluZyA+IG9uU2VydmljZVBvc2l0aW9uTGlzdCA9IG51bGw7DQogIHByaXZhdGUgQXJyYXlMaXN0IDwgU3RyaW5nID4gaWdub3JlVmF0Q29kZXNMaXN0ID0gbnVsbDsNCiAgcHJpdmF0ZSBBcnJheUxpc3QgPCBTdHJpbmcgPiBkaXZpc2lvbkxpc3QgPSBudWxsOw0KICBwcml2YXRlIGJvb2xlYW4gaGFzRGF0YSA9IGZhbHNlOw0KDQogIHB1YmxpYyBJU1BHZXRWQVRDb2RlcyhNSUFQSSBtaSwgUHJvZ3JhbUFQSSBwcm9ncmFtLCBNSUNhbGxlckFQSSBtaUNhbGxlciwgRGF0YWJhc2VBUEkgZGF0YWJhc2UsIExvZ2dlckFQSSBsb2dnZXIpIHsNCiAgICB0aGlzLm1pID0gbWk7DQogICAgdGhpcy5taUNhbGxlciA9IG1pQ2FsbGVyOw0KICAgIHRoaXMucHJvZ3JhbSA9IHByb2dyYW07DQogICAgdGhpcy5kYXRhYmFzZSA9IGRhdGFiYXNlOw0KICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyOw0KICB9DQoNCiAgcHVibGljIHZvaWQgbWFpbigpIHsNCiAgICBDT05PID0gcHJvZ3JhbS5MREFaRC5nZXQoJ0NPTk8nKTsNCiAgICAvL0RpdmlzaW9uID0gbWkuaW5EYXRhLmdldCgiRElWSSIpOw0KICAgIHBvcHVsYXRlQ29udHJvbFByb3BlcnRpZXMoKTsNCiAgIA0KICAgIGlmIChpZ25vcmVCbGFua0RpdmlzaW9uLnRyaW0oKS5lcXVhbHMoIjEiKSkgew0KICAgICAgc3RhcnRESVZJID0gIjAiOw0KICAgIH0NCiAgICAgIGlmICghRGl2aXNpb24udHJpbSgpLmlzRW1wdHkoKSAmJiBEaXZpc2lvbiAhPSBudWxsKSB7DQogICAgICAvL2dldFZBVENvZGVzKERpdmlzaW9uKTsNCiAgICAgIA0KICAgICAgLy9nZXRaZXJvVkFUQ29kZShEaXZpc2lvbik7DQogICAgICB9DQogICAgIA0KICAgIGVsc2V7DQogICAgICBnYXRoZXJBbGxEaXZpc2lvbnMoKTsNCiAgICBkaXZpc2lvbkxpc3QuZWFjaCB7DQogICAgICB2YWx1ZSAtPg0KICAgICAgICBTdHJpbmcgZWFjaERpdmlzaW9uID0gdmFsdWU7DQogICAgICBpZiAoZWFjaERpdmlzaW9uLnRyaW0oKS5pc0VtcHR5KCkgJiYgaWdub3JlQmxhbmtEaXZpc2lvbiA9PSAiMSIpIHsNCiAgICAgICAgDQogICAgICB9IGVsc2Ugew0KCQkgICANCiAgICAgICAgZ2V0VkFUQ29kZXMoZWFjaERpdmlzaW9uKTsNCiAgICAgICAgDQoJCWlmKCFpZ25vcmVWYXRDb2Rlc0xpc3QuY29udGFpbnMoIjAwIikpew0KCQkNCiAgICAgICAgZ2V0WmVyb1ZBVENvZGUoZWFjaERpdmlzaW9uKTt9DQogICAgICB9DQogICAgfQ0KICAgIH0NCg0KICAgIGlmIChoYXNEYXRhKSB7DQogICAgICBtaS5vdXREYXRhLnB1dCgnVFg0MCcsICclJUVPRiUlJyk7DQogICAgICBtaS53cml0ZSgpOw0KICAgIH0NCiAgfQ0KDQogIC8qKg0KICAgKiBHZXQgY29udHJvbCBwcm9wZXJ0aWVzIGZyb20gQ1VHRVgxDQogICAqIA0KICAgKi8NCg0KICBwdWJsaWMgcG9wdWxhdGVDb250cm9sUHJvcGVydGllcygpIHsNCg0KICAgIGJvb2xlYW4gcmVjb3JkRXhpc3RzID0gdHJ1ZTsNCiAgICBkZWYgY2FsbGJhY2sgPSB7DQogICAgICBNYXAgPCBTdHJpbmcsDQogICAgICBTdHJpbmcgPiByZXN1bHRzIC0+DQogICAgICByZWNvcmRFeGlzdHMgPSAhcmVzdWx0cy5nZXQoJ2Vycm9yJyk7DQogICAgICBpZiAocmVjb3JkRXhpc3RzKSB7DQogICAgICAgIGlnbm9yZUJsYW5rRGl2aXNpb24gPSByZXN1bHRzLmdldCgnQTEyMScpOw0KDQogICAgICB9IGVsc2Ugew0KICAgICAgICBtaS5lcnJvcigiUGxlYXNlIG1haW50YWluIHJlY29yZCBpbiBDVUdFWDEgZm9yIElHTk9SRUJMQU5LRElWSSIpOw0KICAgICAgICByZXR1cm47DQogICAgICB9DQogICAgfQ0KICAgIGRlZiBwYXJhbXMgPSBbIkZJTEUiOiAiSVNQRklMRSIsICJQSzAxIjogIkdFVFZBVENPREVTIiwgIlBLMDIiOiAiSUdOT1JFQkxBTktESVZJIl07DQogICAgbWlDYWxsZXIuY2FsbCgiQ1VTRVhUTUkiLCAiR2V0RmllbGRWYWx1ZSIsIHBhcmFtcywgY2FsbGJhY2spOw0KDQogICAgbWV0aG9kUG9zaXRpb25MaXN0ID0gbmV3IEFycmF5TGlzdCA8IFN0cmluZyA+ICgpOw0KICAgIHJlY29yZEV4aXN0cyA9IHRydWU7DQogICAgZGVmIGNhbGxiYWNrMiA9IHsNCiAgICAgIE1hcCA8IFN0cmluZywNCiAgICAgIFN0cmluZyA+IHJlc3VsdHMgLT4NCiAgICAgIHJlY29yZEV4aXN0cyA9ICFyZXN1bHRzLmdldCgnZXJyb3InKTsNCiAgICAgIGlmIChyZWNvcmRFeGlzdHMpIHsNCiAgICAgICAgU3RyaW5nIG1ldGhvZFBvc2l0aW9ucyA9IHJlc3VsdHMuZ2V0KCdBMTIxJyk7DQogICAgICAgIFN0cmluZ1tdIG1ldGhvZFBvc2l0aW9uc0FycmF5ID0gbWV0aG9kUG9zaXRpb25zLnNwbGl0KCc7Jyk7DQogICAgICAgIG1ldGhvZFBvc2l0aW9uc0FycmF5LmVhY2ggew0KICAgICAgICAgIHZhbHVlIC0+DQogICAgICAgICAgICBTdHJpbmcgbWV0aG9kUG9zaXRpb24gPSB2YWx1ZTsNCiAgICAgICAgICBtZXRob2RQb3NpdGlvbkxpc3QuYWRkKG1ldGhvZFBvc2l0aW9uLnRyaW0oKSk7DQoNCiAgICAgICAgfQ0KICAgICAgfSBlbHNlIHsNCiAgICAgICAgbWkuZXJyb3IoIlBsZWFzZSBtYWludGFpbiByZWNvcmQgaW4gQ1VHRVgxIGZvciBNRVRIT0RQT1NJVElPTiIpOw0KICAgICAgICByZXR1cm47DQogICAgICB9DQogICAgfQ0KICAgIGRlZiBwYXJhbXMyID0gWyJGSUxFIjogIklTUEZJTEUiLCAiUEswMSI6ICJHRVRWQVRDT0RFUyIsICJQSzAyIjogIk1FVEhPRFBPU0lUSU9OIl07DQogICAgbWlDYWxsZXIuY2FsbCgiQ1VTRVhUTUkiLCAiR2V0RmllbGRWYWx1ZSIsIHBhcmFtczIsIGNhbGxiYWNrMik7DQoNCiAgICBvblNlcnZpY2VQb3NpdGlvbkxpc3QgPSBuZXcgQXJyYXlMaXN0IDwgU3RyaW5nID4gKCk7DQoNCiAgICByZWNvcmRFeGlzdHMgPSB0cnVlOw0KICAgIGRlZiBjYWxsYmFjazMgPSB7DQogICAgICBNYXAgPCBTdHJpbmcsDQogICAgICBTdHJpbmcgPiByZXN1bHRzIC0+DQogICAgICByZWNvcmRFeGlzdHMgPSAhcmVzdWx0cy5nZXQoJ2Vycm9yJyk7DQogICAgICBpZiAocmVjb3JkRXhpc3RzKSB7DQogICAgICAgIFN0cmluZyBvblNlcnZpY2VQb3NpdGlvbnMgPSByZXN1bHRzLmdldCgnQTEyMScpOw0KICAgICAgICBTdHJpbmdbXSBvblNlcnZpY2VQb3NpdGlvbnNBcnJheSA9IG9uU2VydmljZVBvc2l0aW9ucy5zcGxpdCgnOycpOw0KICAgICAgICBvblNlcnZpY2VQb3NpdGlvbnNBcnJheS5lYWNoIHsNCiAgICAgICAgICB2YWx1ZSAtPg0KICAgICAgICAgICAgU3RyaW5nIG9uU2VydmljZVBvc2l0aW9uID0gdmFsdWU7DQogICAgICAgICAgb25TZXJ2aWNlUG9zaXRpb25MaXN0LmFkZChvblNlcnZpY2VQb3NpdGlvbi50cmltKCkpOw0KDQogICAgICAgIH0NCiAgICAgIH0gZWxzZSB7DQogICAgICAgIG1pLmVycm9yKCJQbGVhc2UgbWFpbnRhaW4gcmVjb3JkIGluIENVR0VYMSBmb3IgT05TRVJWSUNFUE9TSVRJT04iKTsNCiAgICAgICAgcmV0dXJuOw0KICAgICAgfQ0KICAgIH0NCiAgICBkZWYgcGFyYW1zMyA9IFsiRklMRSI6ICJJU1BGSUxFIiwgIlBLMDEiOiAiR0VUVkFUQ09ERVMiLCAiUEswMiI6ICJPTlNFUlZJQ0VQT1NJVElPTiJdOw0KICAgIG1pQ2FsbGVyLmNhbGwoIkNVU0VYVE1JIiwgIkdldEZpZWxkVmFsdWUiLCBwYXJhbXMzLCBjYWxsYmFjazMpOw0KICAgIA0KICAgIGlnbm9yZVZhdENvZGVzTGlzdCA9IG5ldyBBcnJheUxpc3QgPCBTdHJpbmcgPiAoKTsNCiAgICAgcmVjb3JkRXhpc3RzID0gdHJ1ZTsNCiAgICBkZWYgY2FsbGJhY2s0ID0gew0KICAgICAgTWFwIDwgU3RyaW5nLA0KICAgICAgU3RyaW5nID4gcmVzdWx0cyAtPg0KICAgICAgcmVjb3JkRXhpc3RzID0gIXJlc3VsdHMuZ2V0KCdlcnJvcicpOw0KICAgICBpZiAocmVjb3JkRXhpc3RzKSB7DQogICAgICAgIFN0cmluZyBpZ25vcmVWYXRDb2RlcyA9IHJlc3VsdHMuZ2V0KCdBMTIxJyk7DQogICAgICAgIFN0cmluZ1tdIGlnbm9yZVZhdENvZGVzQXJyYXkgPSBpZ25vcmVWYXRDb2Rlcy5zcGxpdCgnOycpOw0KICAgICAgICBpZ25vcmVWYXRDb2Rlc0FycmF5LmVhY2ggew0KICAgICAgICAgIHZhbHVlIC0+DQogICAgICAgICAgICBTdHJpbmcgaWdub3JlVmF0Q29kZSA9IHZhbHVlOw0KICAgICAgICAgIGlnbm9yZVZhdENvZGVzTGlzdC5hZGQoaWdub3JlVmF0Q29kZS50cmltKCkpOw0KDQogICAgICAgIH0NCiAgICAgIH0gLyplbHNlIHsNCiAgICAgICAgbWkuZXJyb3IoIlBsZWFzZSBtYWludGFpbiByZWNvcmQgaW4gQ1VHRVgxIGZvciBGSUxURVJWQVRDT0RFUyIpOw0KICAgICAgICByZXR1cm47DQogICAgICB9Ki8NCiAgICB9DQogICAgZGVmIHBhcmFtczQgPSBbIkZJTEUiOiAiSVNQRklMRSIsICJQSzAxIjogIkdFVFZBVENPREVTIiwgIlBLMDIiOiAiRklMVEVSVkFUQ09ERVMiXTsNCiAgICBtaUNhbGxlci5jYWxsKCJDVVNFWFRNSSIsICJHZXRGaWVsZFZhbHVlIiwgcGFyYW1zNCwgY2FsbGJhY2s0KTsNCg0KICB9DQoNCiAgLyoqDQogICAqIExpc3QgYWxsIE0zIGRpdmlzaW9ucw0KICAgKiANCiAgICovDQogIHB1YmxpYyBnYXRoZXJBbGxEaXZpc2lvbnMoKSB7DQogICAgZGl2aXNpb25MaXN0ID0gbmV3IEFycmF5TGlzdCA8IFN0cmluZyA+ICgpOw0KICAgIGJvb2xlYW4gcmVjb3JkRXhpc3RzID0gdHJ1ZTsNCiAgICBkZWYgY2FsbGJhY2sgPSB7DQogICAgICBNYXAgPCBTdHJpbmcsDQogICAgICBTdHJpbmcgPiByZXN1bHRzIC0+DQogICAgICByZWNvcmRFeGlzdHMgPSAhcmVzdWx0cy5nZXQoJ2Vycm9yJyk7DQogICAgICBpZiAocmVjb3JkRXhpc3RzKSB7DQogICAgICAgIFN0cmluZyBESVZJID0gcmVzdWx0cy5nZXQoJ0RJVkknKTsNCiAgICAgICAgZGl2aXNpb25MaXN0LmFkZChESVZJLnRyaW0oKSk7DQogICAgICAgIA0KICAgICAgfSBlbHNlIHsNCiAgICAgICAgbWkuZXJyb3IoIk5vIERpdmlzaW9ucyBmb3VuZCIpOw0KICAgICAgICByZXR1cm47DQogICAgICB9DQogICAgfQ0KICAgIGRlZiBwYXJhbXMgPSBbIkNPTk8iOiBDT05PLCAiRElWSSI6IHN0YXJ0RElWSV07DQogICAgbWlDYWxsZXIuY2FsbCgiTU5TMTAwTUkiLCAiTHN0RGl2aXNpb25zIiwgcGFyYW1zLCBjYWxsYmFjayk7DQogIH0NCg0KICAvKioNCiAgICogUmVhZCBhbGwgVkFUIGNvZGUgDQogICAqIA0KICAgKi8NCg0KICBwdWJsaWMgZ2V0VkFUQ29kZXMoU3RyaW5nIGVhY2hEaXZpc2lvbikgew0KICAgIERCQWN0aW9uIHF1ZXJ5Q1ZBVFBDID0gZGF0YWJhc2UudGFibGUoIkNWQVRQQyIpDQogICAgICAuaW5kZXgoIjAwIikuc2VsZWN0aW9uKCJDVkNPTk8iLCAiQ1ZESVZJIiwgIkNWVlRDRCIsICJDVkZSRFQiLCAiQ1ZUWDQwIiwgIkNWVlRQMSIsICJDVlZUUDIiLCAiQ1ZWVEQxIiwgIkNWVlREMiIsICJDVkNTQ0QiKQ0KICAgICAgLmJ1aWxkKCkNCiAgICBEQkNvbnRhaW5lciByZWNvcmRDVkFUUEMgPSBxdWVyeUNWQVRQQy5nZXRDb250YWluZXIoKQ0KICAgIHJlY29yZENWQVRQQy5zZXQoIkNWQ09OTyIsIENPTk8udG9JbnRlZ2VyKCkpOw0KICAgIHJlY29yZENWQVRQQy5zZXQoIkNWRElWSSIsIGVhY2hEaXZpc2lvbik7DQogICAgDQogICAgaW50IHJlYWRzID0gcXVlcnlDVkFUUEMucmVhZEFsbChyZWNvcmRDVkFUUEMsIDIsIGdldENWQVRQQ1JlY29yZHMpOw0KDQogIH0NCg0KICBDbG9zdXJlIDwgPyA+IGdldENWQVRQQ1JlY29yZHMgPSB7DQogICAgREJDb250YWluZXIgcmVjb3JkIC0+DQogICAgU3RyaW5nIFZUQ0QgPSByZWNvcmQuZ2V0KCJDVlZUQ0QiKTsNCiAgICBTdHJpbmcgRElWSSA9IHJlY29yZC5nZXQoIkNWRElWSSIpOw0KICAgIFN0cmluZyBGUkRUID0gcmVjb3JkLmdldCgiQ1ZGUkRUIik7DQogICAgU3RyaW5nIFRYNDAgPSByZWNvcmQuZ2V0KCJDVlRYNDAiKTsNCiAgICBTdHJpbmcgVlRQMSA9IHJlY29yZC5nZXQoIkNWVlRQMSIpOw0KICAgIFN0cmluZyBWVFAyID0gcmVjb3JkLmdldCgiQ1ZWVFAyIik7DQogICAgU3RyaW5nIFZURDEgPSByZWNvcmQuZ2V0KCJDVlZURDEiKTsNCiAgICBTdHJpbmcgVlREMiA9IHJlY29yZC5nZXQoIkNWVlREMiIpOw0KICAgIFN0cmluZyBDU0NEID0gcmVjb3JkLmdldCgiQ1ZDU0NEIik7DQogICAgVlRDRCA9IFN0cmluZy5mb3JtYXQoIiUwMmQiLCBWVENELnRyaW0oKS50b0ludGVnZXIoKSk7DQogICAgU3RyaW5nW10gdmF0RGV0YWlscyA9IGdldFZhdERldGFpbHMoVlRDRCwgRElWSSk7DQoNCgkJaWYoIWlnbm9yZVZhdENvZGVzTGlzdC5jb250YWlucyhWVENEKSl7DQoJCQ0KICAgIGlmICh2YXREZXRhaWxzLmxlbmd0aCA9PSAyKSB7DQogICAgICBtaS5vdXREYXRhLnB1dCgnVkFUVCcsIHZhdERldGFpbHNbMF0pOw0KICAgICAgbWkub3V0RGF0YS5wdXQoJ09OU1InLCB2YXREZXRhaWxzWzFdKTsNCiAgICB9DQogICAgbWkub3V0RGF0YS5wdXQoJ1ZUQ0QnLCBWVENEKTsNCiAgICBtaS5vdXREYXRhLnB1dCgnRElWSScsIERJVkkpOw0KICAgIG1pLm91dERhdGEucHV0KCdGUkRUJywgRlJEVCk7DQogICAgbWkub3V0RGF0YS5wdXQoJ1RYNDAnLCBUWDQwKTsNCiAgICBtaS5vdXREYXRhLnB1dCgnVlRQMScsIFZUUDEpOw0KICAgIG1pLm91dERhdGEucHV0KCdWVFAyJywgVlRQMik7DQogICAgbWkub3V0RGF0YS5wdXQoJ1ZURDEnLCBWVEQxKTsNCiAgICBtaS5vdXREYXRhLnB1dCgnVlREMicsIFZURDIpOw0KICAgIG1pLm91dERhdGEucHV0KCdDU0NEJywgQ1NDRCk7DQogICAgbWkud3JpdGUoKTsNCiAgICBoYXNEYXRhID0gdHJ1ZTsNCgkJfQ0KCQ0KDQogIH0NCg0KICAvKioNCiAgICogRGVwZW5kIHVwb24gY29udHJvbCBwcm9wZXJ0eSBnZXQgVkFUIGNvZGUgZGV0YWlscw0KICAgKiANCiAgICovDQogIHB1YmxpYyBTdHJpbmdbXSBnZXRWYXREZXRhaWxzKFN0cmluZyBWVENELCBTdHJpbmcgRElWSSkgew0KICAgIFN0cmluZ1tdIHZhdERldGFpbHMgPSBuZXcgU3RyaW5nWzJdOw0KICAgIGJvb2xlYW4gcmVjb3JkRXhpc3RzID0gdHJ1ZTsNCiAgICBkZWYgY2FsbGJhY2sgPSB7DQogICAgICBNYXAgPCBTdHJpbmcsDQogICAgICBTdHJpbmcgPiByZXN1bHRzIC0+DQogICAgICByZWNvcmRFeGlzdHMgPSAhcmVzdWx0cy5nZXQoJ2Vycm9yJyk7DQogICAgICBpZiAocmVjb3JkRXhpc3RzKSB7DQogICAgICAgIFN0cmluZyBQQVJNID0gcmVzdWx0cy5nZXQoJ1BBUk0nKTsNCiAgICAgICAgaW50IG1ldGhvZFN0YXJ0UG9zaXRpb24gPSBtZXRob2RQb3NpdGlvbkxpc3QuZ2V0KDApLnRvSW50ZWdlcigpOw0KICAgICAgICBpbnQgbWV0aG9kUG9zaXRpb25MZW5ndGggPSBtZXRob2RQb3NpdGlvbkxpc3QuZ2V0KDEpLnRvSW50ZWdlcigpOw0KICAgICAgICBpbnQgb25TZXJ2aWNlU3RhcnRQb3NpdGlvbiA9IG9uU2VydmljZVBvc2l0aW9uTGlzdC5nZXQoMCkudG9JbnRlZ2VyKCk7DQogICAgICAgIGludCBvblNlcnZpY2VMZW5ndGggPSBvblNlcnZpY2VQb3NpdGlvbkxpc3QuZ2V0KDEpLnRvSW50ZWdlcigpOw0KDQogICAgICAgIFN0cmluZyBWQVRUID0gUEFSTS5sZW5ndGgoKSA8IG1ldGhvZFN0YXJ0UG9zaXRpb24gKyBtZXRob2RQb3NpdGlvbkxlbmd0aCA/ICIiIDogUEFSTS5zdWJzdHJpbmcobWV0aG9kU3RhcnRQb3NpdGlvbiwgbWV0aG9kU3RhcnRQb3NpdGlvbiArIG1ldGhvZFBvc2l0aW9uTGVuZ3RoKTsNCiAgICAgICAgU3RyaW5nIFZBVE9uU2VydmljZXMgPSBQQVJNLmxlbmd0aCgpIDwgb25TZXJ2aWNlU3RhcnRQb3NpdGlvbiArIG9uU2VydmljZUxlbmd0aCA/ICIiIDogUEFSTS5zdWJzdHJpbmcob25TZXJ2aWNlU3RhcnRQb3NpdGlvbiwgb25TZXJ2aWNlU3RhcnRQb3NpdGlvbiArIG9uU2VydmljZUxlbmd0aCk7DQogICAgICAgIHZhdERldGFpbHNbMF0gPSBWQVRUOw0KICAgICAgICB2YXREZXRhaWxzWzFdID0gVkFUT25TZXJ2aWNlczsNCiAgICAgIH0NCg0KICAgIH0NCiAgICBkZWYgcGFyYW1zID0gWyJDT05PIjogQ09OTywgIkRJVkkiOiBESVZJLCAiU1RDTyI6ICJWVENEIiwgIlNUS1kiOiBWVENEXTsNCiAgICBtaUNhbGxlci5jYWxsKCJDUlMxNzVNSSIsICJHZXRHZW5lcmFsQ29kZSIsIHBhcmFtcywgY2FsbGJhY2spOw0KICAgIHJldHVybiB2YXREZXRhaWxzOw0KICB9DQoNCiAgLyoqDQogICAqIERlcGVuZCB1cG9uIGNvbnRyb2wgcHJvcGVydHkgZ2V0IFZBVCBjb2RlIGRldGFpbHMNCiAgICogDQogICAqLw0KICBwdWJsaWMgZ2V0WmVyb1ZBVENvZGUoU3RyaW5nIGVhY2hEaXZpc2lvbikgew0KICAgIGJvb2xlYW4gcmVjb3JkRXhpc3RzID0gdHJ1ZTsNCiAgICBkZWYgY2FsbGJhY2sgPSB7DQogICAgICBNYXAgPCBTdHJpbmcsDQogICAgICBTdHJpbmcgPiByZXN1bHRzIC0+DQogICAgICByZWNvcmRFeGlzdHMgPSAhcmVzdWx0cy5nZXQoJ2Vycm9yJyk7DQogICAgICBpZiAocmVjb3JkRXhpc3RzKSB7DQogICAgICAgIFN0cmluZyBUWDQwID0gcmVzdWx0cy5nZXQoJ1RYNDAnKTsNCiAgICAgICAgU3RyaW5nIFBBUk0gPSByZXN1bHRzLmdldCgnUEFSTScpOw0KICAgICAgICBpbnQgbWV0aG9kU3RhcnRQb3NpdGlvbiA9IG1ldGhvZFBvc2l0aW9uTGlzdC5nZXQoMCkudG9JbnRlZ2VyKCk7DQogICAgICAgIGludCBtZXRob2RQb3NpdGlvbkxlbmd0aCA9IG1ldGhvZFBvc2l0aW9uTGlzdC5nZXQoMSkudG9JbnRlZ2VyKCk7DQogICAgICAgIGludCBvblNlcnZpY2VTdGFydFBvc2l0aW9uID0gb25TZXJ2aWNlUG9zaXRpb25MaXN0LmdldCgwKS50b0ludGVnZXIoKTsNCiAgICAgICAgaW50IG9uU2VydmljZUxlbmd0aCA9IG9uU2VydmljZVBvc2l0aW9uTGlzdC5nZXQoMSkudG9JbnRlZ2VyKCk7DQoNCiAgICAgICAgU3RyaW5nIFZBVFQgPSBQQVJNLmxlbmd0aCgpIDwgbWV0aG9kU3RhcnRQb3NpdGlvbiArIG1ldGhvZFBvc2l0aW9uTGVuZ3RoID8gIiIgOiBQQVJNLnN1YnN0cmluZyhtZXRob2RTdGFydFBvc2l0aW9uLCBtZXRob2RTdGFydFBvc2l0aW9uICsgbWV0aG9kUG9zaXRpb25MZW5ndGgpOw0KDQogICAgICAgIFN0cmluZyBWQVRPblNlcnZpY2VzID0gUEFSTS5sZW5ndGgoKSA8IG9uU2VydmljZVN0YXJ0UG9zaXRpb24gKyBvblNlcnZpY2VMZW5ndGggPyAiIiA6IFBBUk0uc3Vic3RyaW5nKG9uU2VydmljZVN0YXJ0UG9zaXRpb24sIG9uU2VydmljZVN0YXJ0UG9zaXRpb24gKyBvblNlcnZpY2VMZW5ndGgpOw0KICAgICAgICANCiAgICAgICAgbWkub3V0RGF0YS5wdXQoJ0RJVkknLCBlYWNoRGl2aXNpb24pOw0KICAgICAgICBtaS5vdXREYXRhLnB1dCgnVlRDRCcsICIwMCIpOw0KICAgICAgICBtaS5vdXREYXRhLnB1dCgnVFg0MCcsIFRYNDApOw0KICAgICAgICBtaS5vdXREYXRhLnB1dCgnT05TUicsIFZBVE9uU2VydmljZXMpOw0KICAgICAgICBtaS5vdXREYXRhLnB1dCgnVkFUVCcsIFZBVFQpOw0KICAgICAgICBtaS53cml0ZSgpOw0KICAgICAgICANCiAgICAgIH0NCg0KICAgIH0NCiAgICBkZWYgcGFyYW1zID0gWyJDT05PIjogQ09OTywgIkRJVkkiOiBlYWNoRGl2aXNpb24sICJTVENPIjogIlZUQ0QiLCAiU1RLWSI6ICIwMCJdOw0KICAgIG1pQ2FsbGVyLmNhbGwoIkNSUzE3NU1JIiwgIkdldEdlbmVyYWxDb2RlIiwgcGFyYW1zLCBjYWxsYmFjayk7DQogIH0NCn0="}}}